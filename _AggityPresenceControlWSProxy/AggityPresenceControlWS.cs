//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using AggityPresenceControlDataModel;
using System;
using System.ComponentModel;
using System.Diagnostics;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml.Serialization;


namespace AggityPresenceControlWSProxy
{

    // 
    // Este código fuente fue generado automáticamente por wsdl, Versión=4.6.1055.0.
    // 


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "AggityPresenceControlWSSoap", Namespace = "http://aggity.presencecontrol.com/")]
    public partial class AggityPresenceControlWS : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback AggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted;

        /// <remarks/>
        public AggityPresenceControlWS()
        {
            this.Url = "http://localhost/AggityPresenceControlWS/AggityPresenceControlWS.asmx";
        }

        /// <remarks/>
        public event AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventHandler AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://aggity.presencecontrol.com/AggityPresenceControlInterfaces.IPunchDataSend." +
            "SendPunchData", RequestElementName = "AggityPresenceControlInterfaces.IPunchDataSend.SendPunchData", RequestNamespace = "http://aggity.presencecontrol.com/", ResponseElementName = "AggityPresenceControlInterfaces.IPunchDataSend.SendPunchDataResponse", ResponseNamespace = "http://aggity.presencecontrol.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("AggityPresenceControlInterfaces.IPunchDataSend.SendPunchDataResult")]
        public bool AggityPresenceControlInterfacesIPunchDataSendSendPunchData(PunchDataBase punchData)
        {
            object[] results = this.Invoke("AggityPresenceControlInterfacesIPunchDataSendSendPunchData", new object[] {
                    punchData});
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginAggityPresenceControlInterfacesIPunchDataSendSendPunchData(PunchDataBase punchData, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("AggityPresenceControlInterfacesIPunchDataSendSendPunchData", new object[] {
                    punchData}, callback, asyncState);
        }

        /// <remarks/>
        public bool EndAggityPresenceControlInterfacesIPunchDataSendSendPunchData(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }

        /// <remarks/>
        public void AggityPresenceControlInterfacesIPunchDataSendSendPunchDataAsync(PunchDataBase punchData)
        {
            this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataAsync(punchData, null);
        }

        /// <remarks/>
        public void AggityPresenceControlInterfacesIPunchDataSendSendPunchDataAsync(PunchDataBase punchData, object userState)
        {
            if ((this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted == null))
            {
                this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted);
            }
            this.InvokeAsync("AggityPresenceControlInterfacesIPunchDataSendSendPunchData", new object[] {
                    punchData}, this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted, userState);
        }

        private void OnAggityPresenceControlInterfacesIPunchDataSendSendPunchDataOperationCompleted(object arg)
        {
            if ((this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompleted(this, new AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    public delegate void AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventHandler(object sender, AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.6.1055.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal AggityPresenceControlInterfacesIPunchDataSendSendPunchDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
                base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public bool Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }

}